#!/bin/sh
# Safer execution (POSIX-compatible)
set -e
set -u
# set -x  # Uncomment for verbose debugging

# Configuration
video_output_dir="encVids"
audio_output_dir="extAudios"
optimized_audio_dir="optAudios"
temp_work_dir=$(mktemp -d -t ffmpeg-process-XXXXXX)
trap 'rm -rf "$temp_work_dir"' EXIT
max_parallel_jobs=$(sysctl -n hw.ncpu 2>/dev/null || nproc 2>/dev/null || echo 4)

# File extensions (space-separated list)
video_extensions="mp4 mkv ts mov avi webm gif"
audio_extensions="mp4 mkv avi mov webm flv wmv mpg mpeg"
audio_file_extensions="mp3 wav flac aac m4a opus"

# Processing parameters
target_fps=30
shutdown=false
cover_timestamp="00:10:00"

# Utility Functions
die() {
    echo >&2 "Error: $1"
    exit 1
}

validate_timestamp() {
    case "$1" in
        [0-9][0-9]:[0-9][0-9]:[0-9][0-9]) return 0 ;;
        *) die "Invalid timestamp format: $1" ;;
    esac
}

sanitize_filename() {
    # Replace problematic characters (spaces, slashes, etc.) but preserve Unicode
    printf "%s" "$1" | sed 's/[<>"|?*[:space:]]/_/g; s/[:;]/_/g' | tr -d '\r\n'
}

find_media_files() {
    type=$1
    exts=""

    case $type in
        video) exts="$video_extensions" ;;
        audio) exts="$audio_extensions" ;;
        audio_files) exts="$audio_file_extensions" ;;
        *) die "Invalid media type: $type" ;;
    esac

    find_cmd="find . -maxdepth 1 -type f"
    first=true
    for ext in $exts; do
        if [ "$first" = true ]; then
            find_cmd="$find_cmd \( -iname '*.$ext'"
            first=false
        else
            find_cmd="$find_cmd -o -iname '*.$ext'"
        fi
    done
    [ "$first" = false ] && find_cmd="$find_cmd \)"

    eval "$find_cmd" | while IFS= read -r file; do
        printf "%s\n" "$file"
    done
}

get_media_properties() {
    file="$1"
    # Batch ffprobe calls to reduce overhead
    ffprobe_out=$(ffprobe -v error -show_entries stream=codec_name,height,r_frame_rate -select_streams v:0 -of csv=p=0 "$file" 2>/dev/null)
    audio_codec=$(ffprobe -v error -select_streams a:0 -show_entries stream=codec_name -of csv=p=0 "$file" 2>/dev/null || echo "none")

    # Parse ffprobe output (csv: codec_name,height,r_frame_rate)
    video_codec=$(echo "$ffprobe_out" | cut -d',' -f1)
    height=$(echo "$ffprobe_out" | cut -d',' -f2)
    fps_input=$(echo "$ffprobe_out" | cut -d',' -f3)
    fps_original=$(echo "scale=2; $fps_input" | bc -l 2>/dev/null || echo 0)
    printf "%s|%s|%s|%s\n" "$video_codec" "$height" "$fps_original" "$audio_codec"
}

encode_videos() {
    mkdir -p "$video_output_dir" || die "Cannot create $video_output_dir"

    # Store PIDs for parallel jobs
    pids=""
    job_count=0

    find_media_files video | while IFS= read -r file; do
        [ -z "$file" ] && continue

        base_name=$(basename -- "$file")
        clean_name=$(sanitize_filename "${base_name%.*}")
        output_file="$video_output_dir/${clean_name}.mp4"

        if [ -f "$output_file" ]; then
            echo "Skipping: $base_name (exists)"
            continue
        fi

        echo "Analyzing: $base_name"

        # Get media properties in one go
        props=$(get_media_properties "$file")
        video_codec=$(echo "$props" | cut -d'|' -f1)
        height=$(echo "$props" | cut -d'|' -f2)
        fps_original=$(echo "$props" | cut -d'|' -f3)
        audio_codec=$(echo "$props" | cut -d'|' -f4)

        # Compliance check
        video_compliant=false
        audio_compliant=false

        [ "$video_codec" = "hevc" ] && [ "$height" -le 720 ] && \
        [ "$(echo "$fps_original <= 30" | bc)" -eq 1 ] && video_compliant=true
        [ "$audio_codec" = "opus" ] && audio_compliant=true

        # Decision logic
        if $video_compliant && $audio_compliant; then
            echo "Skipping: $base_name (fully compliant)"
            continue
        fi

        # Run ffmpeg in background for parallel processing
        if $video_compliant; then
            echo "Processing audio only: $base_name"
            ffmpeg -nostdin -y -i "$file" \
                -c:v copy \
                -c:a libopus -b:a 128k -vbr on \
                -movflags +faststart -tag:v hvc1 \
                -f mp4 \
                "$output_file" >"$temp_work_dir/${clean_name}.log" 2>&1 || \
                echo "Failed to process $base_name" &
        else
            echo "Processing full conversion: $base_name"
            ffmpeg -nostdin -y -i "$file" \
                -c:v libx265 -preset fast -x265-params no-sao=1:bframes=8 \
                -vf "scale=-2:720,fps=$target_fps" \
                -c:a libopus -b:a 128k -vbr on \
                -movflags +faststart -tag:v hvc1 \
                -f mp4 \
                "$output_file" >"$temp_work_dir/${clean_name}.log" 2>&1 || \
                echo "Failed to process $base_name" &
        fi

        pids="$pids $!"
        job_count=$((job_count + 1))

        # Wait if max jobs reached
        if [ $job_count -ge $max_parallel_jobs ]; then
            for pid in $pids; do
                wait "$pid" 2>/dev/null || true
            done
            pids=""
            job_count=0
        fi
    done

    # Wait for remaining jobs
    for pid in $pids; do
        wait "$pid" 2>/dev/null || true
    done
}

extract_audio_from_video() {
    mkdir -p "$audio_output_dir" || die "Cannot create $audio_output_dir"
    timestamp=${1:-$cover_timestamp}
    validate_timestamp "$timestamp"

    find_media_files audio | while IFS= read -r video; do
        [ -z "$video" ] && continue

        base_name=$(basename -- "$video")
        clean_name=$(sanitize_filename "${base_name%.*}")
        temp_audio="$temp_work_dir/${clean_name}.m4a"
        output_file="$audio_output_dir/${clean_name}.m4a"
        cover_art="$temp_work_dir/${clean_name}_cover.jpg"

        echo "Processing audio for: $base_name"

        # Extract cover art
        if ! ffmpeg -nostdin -y -ss "$timestamp" -i "$video" -vframes 1 "$cover_art" 2>/dev/null; then
            echo "Failed to extract cover art for $base_name"
            continue
        fi

        # Extract and process audio
        if ! ffmpeg -nostdin -y -i "$video" -vn -c:a copy -strict -2 "$temp_audio" 2>/dev/null; then
            if ! ffmpeg -nostdin -y -i "$video" -vn -c:a aac -b:a 192k "$temp_audio" 2>/dev/null; then
                echo "Failed to extract audio for $base_name"
                continue
            fi
        fi

        # Embed metadata
        if ! ffmpeg -nostdin -y -i "$temp_audio" -i "$cover_art" \
            -map 0:a -map 1 -c copy -disposition:v:0 attached_pic \
            -metadata:s:v title="Album cover" \
            -metadata:s:v comment="Cover (front)" \
            "$output_file" 2>/dev/null; then
            echo "Failed to embed metadata for $base_name"
        fi
    done
}

optimize_audio() {
    mkdir -p "$optimized_audio_dir" || die "Cannot create $optimized_audio_dir"

    find_media_files audio_files | while IFS= read -r file; do
        [ -z "$file" ] && continue

        base_name=$(basename -- "$file")
        clean_name=$(sanitize_filename "${base_name%.*}")
        output_file="$optimized_audio_dir/${clean_name}.opus"

        if [ -f "$output_file" ]; then
            echo "Skipping: $base_name (exists)"
            continue
        fi

        echo "Optimizing audio: $base_name"
        ffmpeg -nostdin -y -i "$file" \
            -c:a libopus -b:a 128k -vbr on \
            "$output_file" >"$temp_work_dir/${clean_name}.log" 2>&1 || \
            echo "Failed to optimize $base_name"
    done
}

crop_video() {
    printf "Enter aspect ratio (e.g., 0.56 for 9:16 vertical): "
    read -r aspect_ratio
    case $aspect_ratio in
        *[!0-9.]*) die "Invalid aspect ratio" ;;
    esac

    printf "Enter input filename: "
    read -r input_file
    [ -f "$input_file" ] || die "File not found: $input_file"

    base_name=$(basename -- "$input_file")
    clean_name=$(sanitize_filename "${base_name%.*}")
    output_file="${clean_name}_cropped.mp4"

    echo "Cropping $input_file to output: $output_file"
    ffmpeg -nostdin -y -i "$input_file" -vf "crop=iw:iw/$aspect_ratio" \
        -c:a copy -c:v libx265 -preset fast \
        "$output_file" || die "Failed to crop $input_file"
}

# Main Execution: dependency checks
for cmd in ffprobe ffmpeg bc; do
    command -v "$cmd" >/dev/null 2>&1 || die "Missing dependency: $cmd"
done

# Argument parsing
action=""
while [ $# -gt 0 ]; do
    case "$1" in
        -h|--help)
            cat << EOF
Optimized Media Processing Tool

Usage: $0 [options]

Options:
  -v, --video        Encode videos to HEVC/H.265
  -x, --extract [TIME] Extract audio from video with cover art (default: 00:10:00)
  -a, --audio        Optimize audio files to Opus format
  -c, --crop         Crop video to custom aspect ratio
  --fps RATE         Target framerate (number or 'copy')
  --shutdown         Power off after completion
  -h, --help         Show this help

Examples:
  $0 -v --fps copy       # Encode videos, preserving original framerate
  $0 -x 00:03:00         # Extract audio from videos at 3 minutes
  $0 -a                  # Optimize audio files to Opus
  $0 -c                  # Crop a video interactively
  $0 -v --shutdown       # Encode videos and shut down
EOF
            exit 0
            ;;
        -v|--video) action="video" ;;
        -x|--extract)
            action="extract"
            if [ $# -ge 2 ]; then
                case "$2" in
                    [0-9][0-9]:[0-9][0-9]:[0-9][0-9])
                        cover_timestamp=$2
                        shift
                        ;;
                esac
            fi
            ;;
        -a|--audio) action="audio" ;;
        -c|--crop) action="crop" ;;
        --fps)
            target_fps=$2
            shift
            case "$target_fps" in
                ''|*[!0-9]*) [ "$target_fps" = "copy" ] || die "Invalid FPS value" ;;
            esac
            ;;
        --shutdown) shutdown=true ;;
        *) die "Unknown option: $1" ;;
    esac
    shift
done

# Execute action
case "$action" in
    video) encode_videos ;;
    extract) extract_audio_from_video "$cover_timestamp" ;;
    audio) optimize_audio ;;
    crop) crop_video ;;
    *) die "No action specified. Use -h for help." ;;
esac

# Shutdown if requested
if [ "$shutdown" = true ]; then
    echo "Processing complete. System will shutdown in 60 seconds..."
    sleep 60
    sudo poweroff
fi

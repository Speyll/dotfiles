#!/bin/bash
# Optimized Network Manager Script with fzf and corrected saved Wi‑Fi listing

# Configuration
VPN_CONNECTION="protonvpn"
LOCKFILE="/tmp/network-manager.lock"

# Color definitions
BLUE=$(tput setaf 4)
GREEN=$(tput setaf 2)
RED=$(tput setaf 1)
BOLD=$(tput bold)
RESET=$(tput sgr0)

# Cleanup function
cleanup() {
    rm -f "$LOCKFILE"
    stty echo 2>/dev/null
    exit 0
}

trap cleanup INT TERM EXIT

# Check for an existing instance
if [ -e "$LOCKFILE" ]; then
    printf "%s\n" "${RED}Error: Another instance is running!${RESET}" >&2
    exit 1
fi
touch "$LOCKFILE"

# Privilege escalation function
run_privileged() {
    if command -v sudo >/dev/null 2>&1; then
        sudo "$@"
    elif command -v pkexec >/dev/null 2>&1; then
        pkexec "$@"
    else
        printf "%s\n" "${RED}Error: No privilege tool found${RESET}" >&2
        return 1
    fi
}

# Get a deduplicated Wi‑Fi list with colon-separated fields (SSID:SIGNAL:SECURITY)
get_wifi_list() {
    # Rescan networks first to update the list
    nmcli device wifi rescan >/dev/null 2>&1
    nmcli -t -f SSID,SIGNAL,SECURITY device wifi list | \
      awk -F: '!seen[$1]++ {print $1 ":" $2 ":" $3}' | sort -t: -k2 -nr
}

# Display network status for Wi‑Fi and VPN
show_network_status() {
    printf "\n%b%b--- Network Status --- %b\n" "${BLUE}" "${BOLD}" "${RESET}"
    connected_wifi=$(nmcli -t -f active,ssid dev wifi | awk -F: '$1=="yes"{print $2}')
    if [ -n "$connected_wifi" ]; then
        printf "%s\n" "${GREEN}Connected: $connected_wifi${RESET}"
    else
        printf "%s\n" "${RED}No Wi‑Fi connected${RESET}"
    fi
    if nmcli connection show --active | grep -qi "$VPN_CONNECTION"; then
        printf "%s\n" "${GREEN}VPN: Connected${RESET}"
    else
        printf "%s\n" "${RED}VPN: Disconnected${RESET}"
    fi
}

# Connect to Wi‑Fi
connect_wifi() {
    printf "\n%b%b--- Available Networks --- %b\n" "${BLUE}" "${BOLD}" "${RESET}"
    wifi_list=$(get_wifi_list)
    IFS=$'\n' read -rd '' -a networks <<< "$wifi_list"
    if [ "${#networks[@]}" -eq 0 ]; then
        printf "%s\n" "${RED}No networks found.${RESET}"
        return
    fi
    for i in "${!networks[@]}"; do
        IFS=: read -r ssid signal security <<< "${networks[$i]}"
        [ -z "$ssid" ] && ssid="<Hidden>"
        printf "%d) %s   [Signal: %s, Security: %s]\n" "$((i+1))" "$ssid" "$signal" "$security"
    done

    read -rp $'\nEnter number (0 to cancel): ' choice
    if [ "$choice" -eq 0 ]; then
        return
    fi
    index=$((choice-1))
    if [ -z "${networks[$index]}" ]; then
        printf "%s\n" "${RED}Invalid choice.${RESET}"
        return
    fi
    IFS=: read -r ssid signal security <<< "${networks[$index]}"
    ssid=$(echo "$ssid" | xargs)
    [ -z "$ssid" ] && ssid="<Hidden>"

    # Check for existing connection profile
    if nmcli -t -f NAME connection show | grep -Fxq "$ssid"; then
        nmcli connection up "$ssid" && \
            printf "%s\n" "${GREEN}Connected to saved network: $ssid${RESET}" || \
            printf "%s\n" "${RED}Failed to connect to $ssid.${RESET}"
    else
        if [ "$security" = "--" ] || [ -z "$security" ]; then
            nmcli device wifi connect "$ssid" && \
                printf "%s\n" "${GREEN}Connected to open network: $ssid${RESET}" || \
                printf "%s\n" "${RED}Connection to $ssid failed.${RESET}"
        else
            read -rsp "Password: " password
            echo
            nmcli device wifi connect "$ssid" password "$password" && \
                printf "%s\n" "${GREEN}Connected to $ssid${RESET}" || \
                printf "%s\n" "${RED}Connection to $ssid failed.${RESET}"
        fi
    fi
}

# Disconnect from the currently connected Wi‑Fi
disconnect_wifi() {
    connected=$(nmcli -t -f active,ssid dev wifi | awk -F: '$1=="yes"{print $2}')
    if [ -z "$connected" ]; then
        printf "%s\n" "${RED}Not connected to any Wi‑Fi.${RESET}"
        return
    fi
    nmcli connection down "$connected" && \
      printf "%s\n" "${GREEN}Disconnected: $connected${RESET}" || \
      printf "%s\n" "${RED}Disconnect failed.${RESET}"
}

# Toggle VPN connection
toggle_vpn() {
    if nmcli connection show --active | grep -qi "$VPN_CONNECTION"; then
        run_privileged nmcli connection down "$VPN_CONNECTION" && \
          printf "%s\n" "${GREEN}VPN disconnected${RESET}" || \
          printf "%s\n" "${RED}VPN disconnect failed.${RESET}"
    else
        run_privileged nmcli connection up "$VPN_CONNECTION" && \
          printf "%s\n" "${GREEN}VPN connected${RESET}" || \
          printf "%s\n" "${RED}VPN connect failed.${RESET}"
    fi
}

# Forget a saved Wi‑Fi network (using connection type "802-11-wireless")
forget_network() {
    # List only Wi‑Fi type connections (corrected TYPE)
    saved=$(nmcli -t -f NAME,TYPE connection show | awk -F: '$2=="802-11-wireless"{print $1}')
    if [ -z "$saved" ]; then
        printf "%s\n" "${RED}No saved Wi‑Fi networks.${RESET}"
        return
    fi
    printf "\n%b%bSaved Wi‑Fi Networks:%b\n" "${BLUE}" "${BOLD}" "${RESET}"
    i=1
    mapfile -t saved_array <<< "$saved"
    for net in "${saved_array[@]}"; do
        printf "%d) %s\n" "$i" "$net"
        i=$((i+1))
    done
    read -rp $'\nEnter number to forget (0 to cancel): ' choice
    if [ "$choice" -eq 0 ]; then
        return
    fi
    index=$((choice-1))
    if [ -z "${saved_array[$index]}" ]; then
        printf "%s\n" "${RED}Invalid selection.${RESET}"
        return
    fi
    selected="${saved_array[$index]}"
    nmcli connection delete "$selected" && \
      printf "%s\n" "${GREEN}Removed saved network: $selected${RESET}" || \
      printf "%s\n" "${RED}Failed to remove $selected.${RESET}"
}

# Main menu loop
main_menu() {
    while true; do
        show_network_status
        printf "\n%b%b--- Main Menu --- %b\n" "${BLUE}" "${BOLD}" "${RESET}"
        printf "1) Connect to Wi‑Fi\n"
        printf "2) Disconnect Wi‑Fi\n"
        printf "3) Toggle VPN\n"
        printf "4) Refresh\n"
        printf "5) Forget saved Wi‑Fi network\n"
        printf "6) Exit\n"
        read -rp $'\nChoice (1-6): ' choice
        case $choice in
            1) connect_wifi ;;
            2) disconnect_wifi ;;
            3) toggle_vpn ;;
            4) continue ;;
            5) forget_network ;;
            6) break ;;
            *) printf "%s\n" "${RED}Invalid option.${RESET}" ;;
        esac
        sleep 1
    done
}

# Ensure NetworkManager is installed
command -v nmcli >/dev/null 2>&1 || { printf "%s\n" "${RED}NetworkManager required.${RESET}" >&2; exit 1; }

main_menu
cleanup

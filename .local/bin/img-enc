#!/bin/sh

# Configuration
output_dir="optImages"       # Where optimized images will go
target_format="webp"         # Output format
quality=82                   # Compression quality (1-100)
max_dimension=1920           # Max width or height in pixels

# Create output directory if it doesnâ€™t exist
mkdir -p "$output_dir"

# Find and process image files
find . -maxdepth 1 -type f \( -name "*.jpg" -o -name "*.jpeg" -o -name "*.png" -o -name "*.webp" -o -name "*.bmp" -o -name "*.tiff" -o -name "*.heic" -o -name "*.avif" \) -print | while IFS= read -r file; do
    # Extract file details
    base_name=$(basename "$file")
    extension="${file##*.}"
    clean_name=$(printf "%s" "${base_name%.*}" | tr -cd '[:alnum:]._-')
    output_file="$output_dir/${clean_name}_${extension}.$target_format"

    # Skip if output already exists
    if [ -f "$output_file" ]; then
        printf "Skipping: %s (output exists)\n" "$base_name"
        continue
    fi

    printf "Processing: %s -> %s\n" "$base_name" "$output_file"

    # Check image dimensions
    geometry=$(magick identify -format "%wx%h" "$file" 2>/dev/null)
    if [ -z "$geometry" ]; then
        printf "Error: Cannot read image file (possible missing delegate): %s\n" "$file" >&2
        continue
    fi
    width=$(echo "$geometry" | cut -d 'x' -f1)
    height=$(echo "$geometry" | cut -d 'x' -f2)

    # Only resize if image exceeds max dimensions
    resize_arg=""
    if [ "$width" -gt "$max_dimension" ] || [ "$height" -gt "$max_dimension" ]; then
        resize_arg="-resize ${max_dimension}x${max_dimension}"
    fi

    # Convert the image
    if ! magick "$file" -strip $resize_arg -auto-orient -quality "$quality" -define webp:method=6,webp:auto-filter=true -colorspace sRGB "$output_file"; then
        printf "Error: Conversion failed for: %s\n" "$file" >&2
    else
        # Preserve original timestamp
        touch -r "$file" "$output_file"
    fi
done

printf "Processing complete. Results in: %s\n" "$output_dir"

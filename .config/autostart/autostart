#!/bin/sh

set -eu

logfile="/tmp/autostart.log"

# --- User Options ---
enable_audio=false
enable_waybar=false
enable_update_scan=true

wallpaper_source="swaybg-random-online" # swaybg, swaybg-random, swaybg-random-online, wallhaven, mpvpaper-local, mpvpaper-online
theme_mode="fixed" # auto, fixed, none
theme_name="gruvbox-dark-medium"
cursor_name="Kaela-Kovalskia-v2"

default_landscape_wallpaper="$HOME/pictures/walls/wall.jpg"
default_portrait_wallpaper="$HOME/pictures/walls/vert-wall.jpg"
landscape_wallpaper_urls="$HOME/.config/autostart/wallpaper_urls.txt"
portrait_wallpaper_urls="$HOME/.config/autostart/vert-walls_urls.txt"
video_link="https://youtu.be/GIky-GXIBVY"

landscape_wallpaper_tmp="/tmp/landscape_wall.jpg"
portrait_wallpaper_tmp="/tmp/portrait_wall.jpg"

log() { printf '[%s] %s\n' "$(date '+%F %T')" "$1" >>"$logfile"; }

download_random_landscape_wallpaper() {
    url=$(shuf -n1 "$landscape_wallpaper_urls")
    log "Random online landscape wallpaper URL: $url"
    if ! curl -sLf "$url" -o "$landscape_wallpaper_tmp"; then
        log "Failed to download landscape wallpaper. Using default."
        cp "$default_landscape_wallpaper" "$landscape_wallpaper_tmp"
    fi
    if ! file --mime-type "$landscape_wallpaper_tmp" | grep -qE 'image/'; then
        log "Downloaded file is not a valid image. Using default."
        cp "$default_landscape_wallpaper" "$landscape_wallpaper_tmp"
    fi
}

download_random_portrait_wallpaper() {
    url=$(shuf -n1 "$portrait_wallpaper_urls")
    log "Random online portrait wallpaper URL: $url"
    if ! curl -sLf "$url" -o "$portrait_wallpaper_tmp"; then
        log "Failed to download portrait wallpaper. Using default."
        cp "$default_portrait_wallpaper" "$portrait_wallpaper_tmp"
    fi
    if ! file --mime-type "$portrait_wallpaper_tmp" | grep -qE 'image/'; then
        log "Downloaded file is not a valid image. Using default."
        cp "$default_portrait_wallpaper" "$portrait_wallpaper_tmp"
    fi
}

download_wallhaven_wallpaper() {
    # $1: ratio, $2: output file, $3: default fallback, $4: min resolution
    page=$(shuf -i 1-5 -n1)
    json=$(curl -s "https://wallhaven.cc/api/v1/search?categories=110&purity=100&sorting=toplist&topRange=1y&ratios=$1&atleast=$4&page=$page&per_page=24")
    count=$(printf '%s\n' "$json" | jq '.data | length')
    if [ "$count" -eq 0 ]; then
        log "No wallpapers found for ratio $1. Using default."
        cp "$3" "$2"
        return
    fi
    idx=$(shuf -i 0-$((count - 1)) -n1)
    url=$(printf '%s\n' "$json" | jq -r ".data[$idx].path")
    log "Wallhaven wallpaper URL: $url"
    if [ -z "$url" ] || [ "$url" = "null" ]; then
        log "Failed to get random wallpaper for ratio $1. Using default."
        cp "$3" "$2"
    else
        if ! curl -sLf "$url" -o "$2"; then
            log "Failed to download or invalid image for ratio $1. Using default."
            cp "$3" "$2"
        fi
        if ! file --mime-type "$2" | grep -qE 'image/'; then
            log "Downloaded file is not a valid image. Using default."
            cp "$3" "$2"
        fi
    fi
}

set_wallpapers() {
    pkill -x swaybg || true

    case "$wallpaper_source" in
        swaybg)
            landscape="$default_landscape_wallpaper"
            portrait="$default_portrait_wallpaper"
            ;;
        swaybg-random)
            landscape=$(find "$HOME/pictures/walls/" -maxdepth 1 -type f -name "*.jpg" | shuf -n1)
            [ -z "$landscape" ] && landscape="$default_landscape_wallpaper"
            portrait=$(find "$HOME/pictures/walls/" -maxdepth 1 -type f -name "vert-*.jpg" | shuf -n1)
            [ -z "$portrait" ] && portrait="$default_portrait_wallpaper"
            ;;
        swaybg-random-online)
            download_random_landscape_wallpaper
            download_random_portrait_wallpaper
            landscape="$landscape_wallpaper_tmp"
            portrait="$portrait_wallpaper_tmp"
            ;;
        wallhaven)
            download_wallhaven_wallpaper "16x9" "$landscape_wallpaper_tmp" "$default_landscape_wallpaper" "1920x1080"
            download_wallhaven_wallpaper "9x16" "$portrait_wallpaper_tmp" "$default_portrait_wallpaper" "1080x1920"
            landscape="$landscape_wallpaper_tmp"
            portrait="$portrait_wallpaper_tmp"
            ;;
        mpvpaper-local)
            video=$(find "$HOME/pictures/walls/" -maxdepth 1 -type f -name "*.mp4" | shuf -n1)
            portrait_video=$(find "$HOME/pictures/walls/" -maxdepth 1 -type f -name "vert-*.mp4" | shuf -n1)
            [ -n "$video" ] && mpvpaper -vsp -o "no-audio pause=no --loop" DP-2 "$video" >>"$logfile" 2>&1 &
            [ -n "$portrait_video" ] && mpvpaper -vsp -o "no-audio pause=no --loop" HDMI-A-1 "$portrait_video" >>"$logfile" 2>&1 &
            return
            ;;
        mpvpaper-online)
            [ -n "$video_link" ] && {
                mpvpaper -vsp -o "no-audio pause=no --loop" DP-2 "$video_link" >>"$logfile" 2>&1 &
                mpvpaper -vsp -o "no-audio pause=no --loop" HDMI-A-1 "$video_link" >>"$logfile" 2>&1 &
            }
            return
            ;;
        *)
            log "Unknown wallpaper_source: $wallpaper_source"
            return
            ;;
    esac

    swaybg -i "$landscape" -m fill >>"$logfile" 2>&1 &
    sleep 0.5

    if ls /sys/class/drm/ | grep -q DP-2 && ls /sys/class/drm/ | grep -q HDMI-A-1; then
        swaybg -o DP-2 -i "$landscape" -o HDMI-A-1 -i "$portrait" -m fill >>"$logfile" 2>&1 &
    fi
}

kill_processes() {
    for process in openrgb flavours mpvpaper swaybg fnott wlsunset cliphist; do
        pkill -x "$process" >>"$logfile" 2>&1 || true
    done
}

start_audio() {
    for process in pipewire wireplumber pipewire-pulse; do
        pkill -x "$process" >>"$logfile" 2>&1 || true
    done
    pipewire >>"$logfile" 2>&1 &
    sleep 1
    wireplumber >>"$logfile" 2>&1 &
    pipewire-pulse >>"$logfile" 2>&1 &
}

start_openrgb() {
    if command -v openrgb >/dev/null 2>&1; then
        openrgb --server -p pureWhite >>"$logfile" 2>&1 &
    else
        log "OpenRGB is not installed, skipping RGB startup."
    fi
}

setup_environment() {
    dbus-update-activation-environment --all >>"$logfile" 2>&1 &
    /usr/libexec/polkit-gnome-authentication-agent-1 >>"$logfile" 2>&1 &
}

setup_monitors() {
    wlr-randr --output DP-2 --on --mode 1920x1080@120.000000Hz --pos 0,0 --transform normal --scale 1 --adaptive-sync enabled
    wlr-randr --output HDMI-A-1 --on --mode 1920x1080@60.000000Hz --pos -1080,-840 --transform 270 --scale 1 --adaptive-sync enabled >>"$logfile" 2>&1 &
}

configure_theme() {
    case "$theme_mode" in
        auto)
            [ -f "$landscape_wallpaper_tmp" ] && {
                flavours generate dark "$landscape_wallpaper_tmp" >>"$logfile" 2>&1
                flavours apply generated >>"$logfile" 2>&1 &
            }
            ;;
        fixed)
            flavours apply "$theme_name" >>"$logfile" 2>&1 &
            ;;
    esac
}

start_waybar() {
    pkill -x waybar >>"$logfile" 2>&1 || true
    waybar -c "$HOME/.config/waybar/stacking-config" -s "$HOME/.config/waybar/style.css" >>"$logfile" 2>&1 &
}

set_cursor_theme() {
    gsettings set org.gnome.desktop.interface cursor-theme "$cursor_name" >>"$logfile" 2>&1 &
    seat seat0 xcursor_theme "$cursor_name" >>"$logfile" 2>&1 &
}

start_services() {
    fnott >>"$logfile" 2>&1 &
    wlsunset -l 36.7 -L 3.08 >>"$logfile" 2>&1 &
    wl-paste --watch cliphist store -max-items 100 >>"$logfile" 2>&1 &
}

run_update_scan() {
    [ "$enable_update_scan" = true ] && sleep 2 && "$HOME/.local/bin/updtscan" >>"$logfile" 2>&1 &
}

# --- Main Execution ---
kill_processes
[ "$enable_audio" = true ] && start_audio
start_openrgb
setup_environment
setup_monitors
set_wallpapers
configure_theme
gsettings set org.gnome.desktop.interface color-scheme prefer-dark >>"$logfile" 2>&1 &
[ "$enable_waybar" = true ] && start_waybar
set_cursor_theme
start_services
run_update_scan
